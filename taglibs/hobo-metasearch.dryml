<def tag="table-plus-with-filters">
  <table-plus merge-attrs merge-params>
    <!-- Filters -->
    <header: replace>
      <div class="well">
        <mini-search-box/>
        <result-counter/>
        <advanced-search-box merge-attrs />
      </div>
    </header:>

    <!-- Sorting -->
    <field-heading-row:>
      <sorting-row merge-attrs merge-params/>
    </field-heading-row:>

  </table-plus>
</def>

<def tag="mini-search-box">
  <div id="busqueda-normal" class="header" style="">
    <% display = 'block' %>
    <% display = 'none' if params[:q] && params[:q].size > 1 %>
    <div class="search" style="display:#{display}">
      <form param="search-form" method="get" action="" style="float:left;">
        <% 
          # Current model: this.klass
          # Field selected as "name": this.klass.name_attribute
          search_field = this.klass.name_attribute.to_s + '_cont'
        %>
        <% value = '' 
        value = params[:q][search_field.to_sym] if params[:q] %>
        <input class="search" type="search" name="q[#{search_field}]" value="&value"/>
        <submit label="&t('hobo.table_plus.search', :default=>'Search')" class="search-button" param="search-submit"/>&nbsp;
        <input type="submit" class="btn" value="&I18n.t('hobo.metasearch.advanced', :default => 'Advanced search')" onclick="$('#busqueda-avanzada').slideDown(); $('#busqueda-normal').hide(); return false;" />
      </form>
    </div>
  </div>
</def>

<def tag="advanced-search-box">

  <div>
    <% display = 'none' %>
    <% display = 'block' if params[:q] && params[:q].size > 1%>
    <div id="busqueda-avanzada" style="display:#{display};">

      <form class="form-horizontal" action="&url_for(this.klass)" method="get" style="padding:20px;">

      <%
      @filters = attributes[:filters].split(",").each {|t| t.strip! } if attributes && attributes[:filters]  
      if !@filters
        columns = this.klass.content_columns.*.name
        columns -= %w{created_at updated_at created_on updated_on deleted_at key_timestamp}
        assocs = this.klass.reflections.values.reject {|r| r.macro == :has_many }.map &its.name.to_s
        @filters = columns + assocs
      end
      
      for filter in @filters %>
        <super-filter with="&filter" clase="&this.klass.attr_type(filter)" model="&this.klass"/>
      <% end %>
        
        <div class="submit" style="clear:both; margin-left:300px;">
          <submit label="&I18n.t('hobo.metasearch.search', :default => 'Search')"/>
          <a style="margin-top:-5px" class="btn" to="&this.klass"><t key="hobo.metasearch.close_advanced">Close advanced search</t></a>
        </div>

      </form>
      </div>
    <!-- Fin busqueda avanzada -->
    </div>
</def>

<def tag="super-filter" attrs="clase, model">

  <div class="control-group span5">
    <label class="control-label"><t key="activerecord.attributes.#{model.to_s.downcase}.#{this.to_s}"><%= this.to_s.humanize %></t></label>
    <div class="controls">
    <% case clase.to_s
    
    when /EnumString/ %>
        <% if params[:q]
             selected = clase.values.detect {|o| o.to_s==params[:q][:"#{this.to_s}_eq"] } 
           else
             selected = ''
           end %>
        <select-menu first-option="" first-value="" 
        name="q[#{this.to_s}_eq]" selected="&selected"
        options="&clase.values.map{|value| 
          translation = clase.to_s.tableize + '.' + value.to_s.downcase
          [translate(translation, :default => value.to_s), value]}" />
    
   <% when /String|Text/ %>
      <% value = '' %>
      <% value = params[:q][:"#{this}_cont"] if params[:q] %>
      <input type="text" name="q[#{this}_cont]" value="&value"/>
      
    <% when /Date/ %>
      <% value = '' %>
      <% value = params[:q][:"#{this}_gteq"] if params[:q] %>
      <t key="hobo.metasearch.from">from</t> <bootstrap-datepicker style="width: 80px" name="q[#{this}_gteq]" value="&value"/>
      <% value = params[:q][:"#{this}_lteq"] if params[:q] %>
      <t key="hobo.metasearch.to">to</t> <bootstrap-datepicker style="width: 80px" name="q[#{this}_lteq]" value="&value"/>
      
    <% when /Boolean/ %>
      <% options = [
        ["not #{this.to_s}",'f'],
        [this.to_s,'t']
      ] %>
      <% selected = ''
      selected =params[:q][:"#{this.to_s}_eq"] if params[:q]%>
        <select-menu first-option="" first-value="" name="q[#{this.to_s}_eq]"
                    options="&options" selected="&selected"/>
    
    <% when /Lifecycle/ %>
        <% if params[:q]
             selected = model::Lifecycle.states.keys.detect {|o| o.to_s==params[:q][:"#{this.to_s}_eq"] } 
           else
             selected = ''
           end %>
        
        <select-menu first-option="" first-value="" 
        name="q[#{this.to_s}_eq]" selected="&selected"
        options="&model::Lifecycle.states.keys.map{|state| 
          translation = 'activerecord.attributes.'+ model.to_s.downcase + '.lifecycle.states.' + state.to_s
          [translate(translation, :default => state.to_s), state]}" />

      
    <!-- Any other option should be a belongs_to -->
    <% else 
      selected = ''
      selected = clase.all.detect {|o| o.to_s==params[:q][:"#{this.to_s}_name_eq"] } if params[:q] %>
        <select-menu first-option="" first-value="" name="q[#{this.to_s}_name_eq]" options="&clase.all" selected="&selected"/>
    <% end %>    
    </div>
    
  </div>
</def>

<def tag="sorting-row">
<% sort_field ||= @sort_field; sort_direction ||= @sort_direction; sort_columns ||= {} %>
    <% sort_columns['this'] ||= this.member_class.try.name_attribute %>
      <with-field-names merge-attrs="&all_attributes & attrs_for(:with_fields)">
        <% col = sort_columns[scope.field_path] || scope.field_path
           sort = sort_field == col && sort_direction == 'asc' ?
                    "-#{col}" : col
           sort_url = url_for_page_path(params.merge(:sort => sort) - [:page])
           col_heading_name = this.member_class.try.human_attribute_name(scope.field_name, :default=> scope.field_name.titleize) %>
        <th param="#{scope.field_name}-heading">
          <%
          assocs = this.member_class.reflections.values.reject {|r| r.macro == :has_many }.map &its.name.to_s
          sort_field = col
          #FIXME name_attribute can be different, it doesn't have to be 'name'
          sort_field += '_name' if assocs.include? col
          %>
          <%= sort_link @search, :"#{sort_field}", col_heading_name, :default_order => :asc %>
        </th>
      </with-field-names>
      <th if="&all_parameters[:controls]" class="controls"></th>
</def>

<def tag="result-counter">
  <p style="float:right;">
    <%= this.total_entries %> <t key="hobo.metasearch.results">results</t>. 
    <t key="hobo.metasearch.page">Page</t> <%= this.current_page %> <t key="hobo.metasearch.of">of</t> <%= this.total_pages %>
  </p>
</def>
